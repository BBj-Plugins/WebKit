
class public ClientUtil

  field private static BBjTopLevelWindow Wnd!
  field private static BBjHtmlView InjHtml!
  field private static BBjString alreadyLoaded$
  field private static BBjString basePath$ = "/webapp/" + BBjAPI().getBuiManager().getApplicationName()

  method private ClientUtil()
  methodend

  method public static BBjHtmlView getInjHtml()
      methodret #InjHtml!
  methodend

  method public static void init()
    if ClientUtil.getInjHtml() = null() OR ClientUtil.getInjHtml().isDestroyed() then
        declare BBjSysGui sg!
        sg! =  BBjAPI().openSysGui("X0")
        rem create our helper window and give it a context that is likely far away from any application context IDs
        #Wnd! =sg!.addWindow(65501,0,0,0,0,"",$01101083$)
        sg!.setContext(sg!.getAvailableContext())
        #Wnd!.setStyle("position","fixed")
        #Wnd!.setStyle("left","-20px")
        #Wnd!.setStyle("top","0px")
        #Wnd!.setStyle("width","0px")
        #Wnd!.setStyle("height","0px")
        inj_html! = CAST(BBjHtmlView,#Wnd!.addHtmlView(64190,0,0,0,0,""))
        inj_html!.setNoEdge(1)
        ClientUtil.setInjHtml(inj_html!)
    fi
    
  methodend

  method public static void addLocalCSS(BBjString cssfile$)

    if pos(cssfile$+$0a$=#alreadyLoaded$)>0 then 
          methodret
    fi
    #alreadyLoaded$=#alreadyLoaded$+cssfile$+$0a$

    if #getInjHtml() = null() then
      ClientUtil.init()
    fi

    ch=unt
    open (ch)cssfile$
    size = dec(fin(ch)(1,4)) 
    if size>1 then
      read record (ch,siz=size)style$
    fi
    close (ch)
    
    style! = style$
    style! = style!.replaceAll("\r","")
    style! = style!.replaceAll("\n","")
    
    BBjAPI().getBuiManager().injectStyle(style!)

    rem #getWnd().setAttribute("@app-style-bottom",style!)

  methodend


  method public static void setDarkMode(BBjNumber f_dark)
    
    if #getInjHtml() = null() then
      ClientUtil.init()
    fi
    
    if f_dark then
          #Wnd!.setAttribute("@app-theme", "dark")
    else
          #Wnd!.setAttribute("@app-theme", "light")
    fi
    
  methodend

  method public static void loadThemeFile(BBjString cssfile$)
      #addLocalCSS(cssfile$)
  methodend

  method public static void addLocalJavascript(BBjString jsfile$)

    if pos(jsfile$+$0a$=#alreadyLoaded$)>0 then 
          methodret
    fi
    #alreadyLoaded$=#alreadyLoaded$+jsfile$+$0a$


    if #getInjHtml() = null() then
      ClientUtil.init()
    fi

    ch=unt
    open (ch)jsfile$
    size = dec(fin(ch)(1,4)) 
    if size>1 then
      read record (ch,siz=size)js$
    fi
    close (ch)
    

    ret! = #InjHtml!.injectScript(js$,0)
    ret! = #InjHtml!.injectScript(js$,1)
  methodend


  method public static void addStyleURL(BBjString url$)

    if pos(url$+$0a$=#alreadyLoaded$)>0 then 
          methodret
    fi
    #alreadyLoaded$=#alreadyLoaded$+url$+$0a$
        
    if #getInjHtml() = null() then
      ClientUtil.init()
    fi
    script$ = "var link =  $doc.createElement('link');"
    script$ = script$ + "link.setAttribute('rel','stylesheet');"
    script$ = script$ + "link.setAttribute('href','"+url$+"');"
    script$ = script$ + "$doc.head.appendChild(link);"
    #InjHtml!.executeScript(script$)
  methodend

  method public static void addJavascriptURL(BBjString url$)
      ClientUtil.addJavascriptURL(url$,"text/javascript") 
  methodend

  method public static void addJavascriptURL(BBjString url$, BBjString type$)

    if pos(url$+$0a$=#alreadyLoaded$)>0 then 
          methodret
    fi
    #alreadyLoaded$=#alreadyLoaded$+url$+$0a$
        
    if #getInjHtml() = null() then
      ClientUtil.init()
    fi
    script$ = "var link =  $doc.createElement('script');"
    script$ = script$ + "link.setAttribute('type','"+type$+"');"
    script$ = script$ + "link.setAttribute('src','"+url$+"');"
    script$ = script$ + "$doc.head.appendChild(link);"
    #InjHtml!.executeScript(script$)
  methodend    

  method public static void executeJavascript(BBjString script$)
    if #getInjHtml() = null() then
      ClientUtil.init()
    fi
    #InjHtml!.executeScript(script$)
  methodend        

  rem /**
  rem  * Computes the best locale for the application by matching the supportedLocales! with 
  rem  * the locales that the browser has communicated using the navigator.languages variable
  rem  * If no match is found, the first of the supportedLocales! will be returned
  rem  * @param  BBjString supportedLocales!: a comma-separated list of locales that the application supports, e.g. en,de_DE,de_AT,es_MX,es
  rem  * 
  rem  */
  method public static BBjString computeClientLocale(BBjString supportedLocales!)
      
      browser_locales! = BBjAPI().getThinClient().getClientLocales()
      tmp$=","+supportedLocales!+","
      it! = browser_locales!.iterator()
      while it!.hasNext()
          loc$ = it!.next()
          if pos(","+loc$+","=tmp$)>0 then
              methodret loc$
          fi
          
          rem do an auto-fallback to the main language, if a dialect was provided
          rem this might be a little against the RFC as the header may bring the 
          rem main language in a later preference position, but just to be sure...
          if len(loc$)=5 then 
              loc$=loc$(1,2)
                  if pos(","+loc$+","=tmp$)>0 then
                      methodret loc$
                  fi
          fi
          
      wend
      
      loc$=loc$(2)
      methodret loc$(1,pos(","=loc$)-1) 

  methodend
      
  method public static void setUrlAnchor(BBjString anchor$, BBjString title!)   
      script$="var cur_route = window.location.href;"
      script$=script$+"cur_route=cur_route.substring(0,cur_route.indexOf('#'));"
      script$=script$+"cur_route=cur_route+'#"+anchor$+"';"
      script$=script$+"window.history.pushState('"+anchor$+"', '"+title!+"', cur_route);"
      #InjHtml!.executeScript(script$)
  methodend

  method public static BBjString getUrlAnchor()   
      script$="window.location.pathname"
      path! = #InjHtml!.executeScript(script$)
      query$ = #InjHtml!.executeScript("window.location.search")
      methodret path!.replace(#basePath$, "") + query$
  methodend

  method public static BBjString getUrl()   
      script$="window.location.href"
      path! = #InjHtml!.executeScript(script$)
      methodret path!
  methodend

  method public static void consoleLog(BBjString output!)
      BBjAPI().getSysGui(err=nosg).executeScript("console.log('"+output!+"')")
      methodret
      nosg:
      BBjAPI().openSysGui("X0").executeScript("console.log('"+output!+"')")
  methodend

  method public static String encodeURI(String value!)
      script$ = String.format("encodeURI('%s')", value!.toLowerCase())
      uri$ = #InjHtml!.executeScript(script$)
      methodret uri$
  methodend


classend
