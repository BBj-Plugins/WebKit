use java.util.HashMap
use com.google.gson.Gson
use com.google.gson.JsonParser
use com.google.gson.JsonObject
rem /**
rem  * BBjRouterMatchedEvent is the matched event payload for matched routes.
rem  * It contains all the necessary data about the current matched route
rem  *
rem  * @author Hyyan Abo Fakher
rem  */
class public BBjRouterMatchedEvent
    rem /**
    rem  * The route data
    rem  */
    field public HashMap Data! = new HashMap()
    rem /**
    rem  * The route query params
    rem  */
    field public HashMap Params! = new HashMap()
    rem /**
    rem  * The route query as string
    rem  */
    field public BBjString QueryString! = ""
    rem /**
    rem  * The route path
    rem  */
    field public BBjString Path! = ""

classend
rem /**
rem  * BBjRouter is a minimalistic Client side router.
rem  *
rem  * At the application level there should be one and only one router .
rem  * Having multi router instances is not supported and it does not has
rem  * a use case.
rem  *
rem  * @author Hyyan Abo Fakher
rem  */
class public BBjRouter

    field protected BBjChildWindow Canvas!
    field protected BBjHtmlView HTMLView!
    rem /**
    rem  * Construct new BBjRouter for the given BBjTopLevelWindow instance
    rem  *
    rem * @param BBjTopLevelWindow wnd!
    rem * @param BBjNumber id!
    rem */
    method public BBjRouter(BBjWindow wnd! ,BBjNumber id!)
        #Canvas! = wnd!.addChildWindow(id!,0,0,0,0,"",$00000800$,BBjAPI().getSysGui().getAvailableContext())
        rem setup a hidden HTMLView to handle events
        #HTMLView! = #Canvas!.addHtmlView(101,0,0,0,0,"",$0000$)
        #HTMLView!.setOpaque(0)
        #HTMLView!.setNoEdge(1)
        #HTMLView!.setTabTraversable(0)
        #HTMLView!.setFocusable(0)
        #HTMLView!.addStyle("bbj-router")
        #HTMLView!.setCallback(BBjAPI.ON_NATIVE_JAVASCRIPT,#this!,"onEvent")
        rem inject the required javascript to boot the router
        sysGui! = BBjAPI().getSysGui()
        sysGui!.executeScript(#readFile("WebKit/util/js/navigo.min.js"))
        sysGui!.executeScript(#readFile("WebKit/util/js/BBjRouter.js"))
    methodend
    rem /**
    rem  * Construct new BBjRouter for the given BBjTopLevelWindow instance
    rem  *
    rem * @param BBjTopLevelWindow wnd!
    rem */
    method public BBjRouter(BBjWindow wnd!)
        #this!(wnd! ,wnd!.getAvailableControlID())
    methodend
    rem /**
    rem  * Navigates to a route but it doesn't change the browser URL.
    rem  * You should fire this at least one in the beginning.
    rem  *
    rem  * @return The router instance.
    rem  */
    method public BBjRouter resolve()
        sysGui! = BBjAPI().getSysGui()
        sysGui!.executeScript("BBjRouter.resolve()")
        methodret #this!
    methodend
    rem /**
    rem  * Navigate to the given route.
    rem  *
    rem  * @param path! The path to navigate to.
    rem  * @param silent! When true , then the router will not fire events
    rem  *                for this change
    rem  *
    rem  * @return The router instance.
    rem  */
    method public BBjRouter navigate(BBjString path!, BBjNumber silent!)
        sysGui! = BBjAPI().getSysGui()
        sysGui!.executeScript("BBjRouter.navigate('" + path! + "'," + str(silent!)+ ")")
        methodret #this!
    methodend
    rem /**
    rem  * Navigate to the given route and fire change events
    rem  *
    rem  * @param path! The path to navigate to.
    rem  *
    rem  * @return The router instance.
    rem  */
    method public BBjRouter navigate(BBjString path!)
        #navigate(path!, 0)
        methodret #this!
    methodend
    rem /**
    rem  * Register a new route
    rem  *
    rem  * @param path! The route's path.
    rem  * @param callback! The route's callback's name to execute when
    rem  *                  the route is matched
    rem  *
    rem  * @return The router instance.
    rem  */
    method public BBjRouter register(BBjString path!, BBjString callback!)
        sysGui! = BBjAPI().getSysGui()
        sysGui!.executeScript("BBjRouter.on('" + path! + "')")
        BBjAPI().setCustomEventCallback(str(#this!) + str(path!), callback!)
        methodret #this!
    methodend
    rem /**
    rem  * Register a new route
    rem  *
    rem  * @param path! The route's path.
    rem  * @param obj! A class instance
    rem  * @param method! A method in the given class instance to execute when
    rem  *                the route is matched
    rem  *
    rem  * @return The router instance.
    rem  */
    method public BBjRouter register(BBjString path!, CustomObject obj!, BBjString method!)
        sysGui! = BBjAPI().getSysGui()
        sysGui!.executeScript("BBjRouter.on('" + path! + "')")
        BBjAPI().setCustomEventCallback(str(#this!) + str(path!), obj!, method!)
        methodret #this!
    methodend
    rem /**
    rem  * Unregister an already registered route
    rem  *
    rem  * @param path! The route's path.
    rem  *
    rem  * @return The router instance.
    rem  */
    method public BBjRouter unregister(BBjString path!)
        sysGui! = BBjAPI().getSysGui()
        sysGui!.executeScript("BBjRouter.off('" + path! + "')")
        methodret #this!
    methodend
    rem /**
    rem  * Handle the router client events.
    rem  *
    rem  * @param ev! The Javascript event
    rem  * @ignore
    rem  */
    method public void onEvent(BBjNativeJavaScriptEvent ev!)
        map! = ev!.getEventMap()
        type$ = str(map!.get("type"))
        detail$ = str(map!.get("detail"))
        switch type$
            case "bbj-router-matched"
                event! = new BBjRouterMatchedEvent()
                parser! = new JsonParser()
                gson! = new Gson()
                detailsAsJson!  = parser!.parse(detail$).getAsJsonObject()
                path! = detailsAsJson!.get("path").getAsString()
                event!.setData(gson!.fromJson(detailsAsJson!.get("data").toString(), HashMap.class))
                event!.setParams(gson!.fromJson(detailsAsJson!.get("params").toString(), HashMap.class))
                event!.setQueryString(detailsAsJson!.get("queryString").getAsString())
                event!.setPath(path!)
                BBjAPI().postPriorityCustomEvent(str(#this!) + str(path!), event!)
                break
        swend
    methodend
    rem /**
    rem  * Read the content of the given file as a String.
    rem  *
    rem  * @param file! The file's path
    rem  *
    rem  * @return The file's content
    rem  */
    method protected BBjString readFile(BBjString file!)
        methodret new String(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(BBjAPI().getFileSystem().resolvePath(file!))))
    methodend

classend
