use ::BBjWidget/BBjWidget.bbj::BBjWidget
use ::AuthKit/profile/GoogleAccountProfile.bbj::GoogleAccountProfile
use ::AuthKit/profile/MicrosoftAccountProfile.bbj::MicrosoftAccountProfile
use ::AuthKit/profile/AccountProfile.bbj::AccountProfile
use ::AuthKit/widgets/GoogleLoginWidget.bbj::GoogleLoginWidget
use ::AuthKit/widgets/MicrosoftLoginWidget.bbj::MicrosoftLoginWidget
use ::AuthKit/totp/TOTP.bbj::TOTP

use ::WebKit/util/DynamicLoader.bbj::DynamicLoader
use ::WebKit/util/ClientUtil.bbj::ClientUtil

use ::WebKit/widgets/InputField/InputField.bbj::InputField
use ::WebKit/widgets/InputField/IFieldReq.bbj::IFieldReq
use ::WebKit/widgets/InputField/DefaultFieldReq.bbj::DefaultFieldReq
use ::WebKit/widgets/InputField/IValidator.bbj::IValidator

use ::WebKit/framework/LoginDialog/SampleAuthProvider.bbj::SampleAuthProvider
use ::WebKit/framework/LoginDialog/IAuthProvider.bbj::IAuthProvider
use ::WebKit/framework/LoginDialog/IAuthRenewPwProvider.bbj::IAuthRenewPwProvider
use ::WebKit/framework/LoginDialog/LoginDialogBuilder.bbj::LoginDialogBuilder
use ::WebKit/framework/LoginDialog/LoginDialogWindow.bbj::LoginDialogWindow
use ::WebKit/framework/LoginDialog/LoginInputValidator.bbj::UsernameValidator
use ::WebKit/framework/LoginDialog/LoginInputValidator.bbj::PasswordValidator
use ::WebKit/framework/LoginDialog/LoginInputValidator.bbj::NewPasswordValidator
use ::WebKit/framework/LoginDialog/LoginInputValidator.bbj::RepeatPasswordValidator

use ::WebKit/i18n/I18n.bbj::I18n

class public LoginDialog

    field public static BBjNumber ON_LOGIN = 800001
    field private IAuthProvider authProvider!
    field private IAuthRenewPwProvider authRenewPw!

    field private BBjSysGui sysGui!
    field private BBjTopLevelWindow window!
    field private BBjWindow loginWrapper!

    field private LoginDialogWindow loginWindow!
    field private LoginDialogWindow forgotPwWindow!
    field private LoginDialogWindow responseWindow!
    field private LoginDialogWindow newPwWindow!
    

    field public Boolean AllowRemember! = Boolean.FALSE
    field public Boolean AllowForgotPw! = Boolean.FALSE
    field public Boolean LoginWithMicrosoft! = Boolean.FALSE
    field public Boolean LoginWithGoogle! = Boolean.FALSE

    field public Boolean isValidationEnabled! = Boolean.TRUE
    field public IValidator usernameValidator!
    field public IValidator passwordValidator!

    field private AccountProfile profile!
    field public BBjString User$ = ""

    field private BBjString logoURL$

    method public LoginDialog(BBjString title$, IAuthProvider authProvider!)
        bbjutils! = new ::BBUtils.bbj::BBUtils()
        DynamicLoader.addLocalCSS("WebKit/framework/LoginDialog/LoginDialog.css")

        #sysGui! = BBjAPI().openSysGui("X0")
        #window! = #sysGui!.addWindow(#sysGui!.getAvailableContext(),25,25,1200,750, title$, $01111083$)
        #window!.addPanelStyle("loginWrapperPanelStyle") 
        #loginWrapper! = #window!.addChildWindow(#window!.getAvailableControlID(),0,0,0,0,"",$00118800$,BBjAPI().getSysGui().getAvailableContext()) 
        #loginWrapper!.addPanelStyle("loginWidgetPanelStyle")
        rem intermediate fix for tabindex defaulting to 0
        #loginWrapper!.setAttribute("tabindex","-1")
            
        rem checkAuthRenewPwProvider! = cast(IAuthRenewPwProvider,authProvider!,err=*next)
        #authProvider! = authProvider!

        dark$="0"
        dark$=BBjAPI().getThinClient().getUserProperty(USER_PROPERTIES_COOKIES,"DarkMode",err=*next)
        if dark$>"0" then
            ClientUtil.setDarkMode(Boolean.TRUE)
            BBjAPI().getThinClient().setUserProperty(USER_PROPERTIES_COOKIES ,"DarkMode",dark$)
        fi           
        
    methodend

    method public void setLogo(BBjString logo$)
        #logoURL$ = logo$
    methodend

    method public void disableValidation()
        #isValidationEnabled! = Boolean.FALSE
    methodend

    method public void setAuthRenewPwProvider(IAuthRenewPwProvider authProvider!)
        #authRenewPw! = authProvider!
        #AllowForgotPw! = Boolean.TRUE
    methodend

    method public LoginDialogWindow getLoginWindow()
        methodret #loginWindow!
    methodend

    method public AccountProfile getProfile()
        methodret #profile!
    methodend

    method public static void clearRememberToken()
        BBjAPI().getThinClient().setUserProperty(0,"Strict","remember",token$)
    methodend

    method public setCustomValidators(IValidator usernameValidator!, IValidator passwordValidator!)
        #usernameValidator = usernameValidator
        #passwordValidator = passwordValidator
    methodend

     rem |||||| DO MODAL ||||||
    method public Boolean doModal()

        if #AllowRemember! then
            token$ = BBjAPI().getThinClient().getUserProperty(0,"remember",err=*next)
            if token$>"" and #authProvider!.checkToken(token$) then
                token$ = #authProvider!.getToken()
                BBjAPI().getThinClient().setUserProperty(0,"Strict","remember",token$)
                #User$ = #authProvider!.getUser()
                #profile! = #authProvider!.getProfile()
                methodret Boolean.TRUE
            fi
        fi  
   
        tempPw$ = ClientUtil.getUrlAnchor()
        rem a valid token for password reset needs to start with "token"
        rem todo externalize the pattern matching for the token into AuthProvider
        if len(tempPw$)<5 or tempPw$(1,5)<>"token" then 
            #loginWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
            #buildLoginContent(#loginWindow!, "")
            #loginWindow!.getUsername().focus()
        else 
            if Boolean.TRUE then    rem check if Token is valid
                #newPwWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
                #buildNewPwContent(#newPwWindow!,tempPw$)
            endif
        endif

        process_events

        login:
            user$=#loginWindow!.getUsername().getInput()
            pass$=#loginWindow!.getPassword().getInput()
                
                if #authProvider!.checkLogin(user$,pass$) then
                    #User$ = user$
                    #profile! = #authProvider!.getProfile()
                    if #loginWindow!.getRememberMe() <> null() AND  #loginWindow!.getRememberMe().isSelected() then
                        token$ = #authProvider!.getToken()
                        BBjAPI().getThinClient().setUserProperty(0,"Strict","remember",token$)
                    fi
                    methodret Boolean.TRUE
                else
                    #loginWindow!.onBadLogin()
                fi
                return
           
           onGoogleLogin:
           onMicrosoftLogin:
                ev! = BBjAPI().getLastEvent()
                userProfile! = ev!.getObject()
                if #authProvider!.checkLoginWithAccountProfile(userProfile!) then
                    #User$ = str(userProfile!.getFullName())
                    #profile! = #authProvider!.getProfile()
                    #window!.destroy()
                    methodret Boolean.TRUE
                fi
                return
    methodend

    method public void buildLoginContent(LoginDialogWindow wnd!)
        #buildLoginContent(wnd!,"")    
    methodend

    method public void buildLoginContent(LoginDialogWindow wnd!, BBjString user$)         
        #buildLoginContent(wnd!,user$,"")  
    methodend

    method public void buildLoginContent(LoginDialogWindow wnd!, BBjString user$, BBjString loginResponse$)
    
        LoginDialogBuilder.addLogo(wnd!,#logoURL$)

        if #isValidationEnabled! = Boolean.TRUE then

            if #usernameValidator! = null() then #usernameValidator! = new UsernameValidator()
            if #passwordValidator! = null() then #passwordValidator! = new PasswordValidator()

            LoginDialogBuilder.addUsernameInput(wnd!, new UsernameValidator(), user$)
            LoginDialogBuilder.addPasswordInput(wnd!, new PasswordValidator(), I18n.getTranslation("password"), I18n.getTranslation("your-password"))
        else
            LoginDialogBuilder.addUsernameInput(wnd!, null(), user$)
            LoginDialogBuilder.addPasswordInput(wnd!, null(), "Password", "Your password")
        fi

        if #AllowRemember! = Boolean.TRUE then LoginDialogBuilder.addRememberMeBox(wnd!) then
            LoginDialogBuilder.addSubmitButton(wnd!, I18n.getTranslation("Login"), I18n.getTranslation("login"))
        fi

        if #getLoginWithGoogle() OR #getLoginWithMicrosoft() then
            LoginDialogBuilder.addSSOZone(wnd!)
            if #getLoginWithGoogle() then
                LoginDialogBuilder.addLoginWithGoogle(wnd!)
            fi
            if #getLoginWithMicrosoft() then
                LoginDialogBuilder.addLoginWithMicrosoft(wnd!)
            fi            
        fi
        
        
        if #AllowForgotPw! = Boolean.TRUE then LoginDialogBuilder.addRedirect(wnd!, I18n.getTranslation("forgot-your-password"), "gotoForgotPassword")  
    methodend

    method public void buildForgotPwContent(LoginDialogWindow wnd!, BBjString user$)
        LoginDialogBuilder.addLogo(wnd!,#logoURL$)
        LoginDialogBuilder.addPageTitle(wnd!,I18n.getTranslation("request-a-new-password"))
        if #isValidationEnabled! = Boolean.TRUE then

            if #usernameValidator! = null() then #usernameValidator! = new UsernameValidator()
            LoginDialogBuilder.addUsernameInput(wnd!, #usernameValidator! , user$)
            LoginDialogBuilder.addPasswordInput(wnd!, #passwordValidator!, I18n.getTranslation("password"), I18n.getTranslation("your-password"))
        else
            LoginDialogBuilder.addUsernameInput(wnd!, null(), user$)
        fi
        LoginDialogBuilder.addSubmitButton(wnd!, "Send Email", "requestForgotPasswordToken")
        LoginDialogBuilder.addRedirect(wnd!, "Return to Login", "gotoLogin")  
    methodend
 
    method public void buildResponseContent(LoginDialogWindow wnd!, BBjString memory$,  BBjString title$, BBjString response$, Boolean retry!, BBjString methodName$ )
        LoginDialogBuilder.addMemory(wnd!, memory$)
        LoginDialogBuilder.addLogo(wnd!, #logoURL$)
        LoginDialogBuilder.addPageTitle(wnd!,title$)
        LoginDialogBuilder.addTextField(wnd!, response$)
        if retry! then
            LoginDialogBuilder.addSubmitButton(wnd!, I18n.getTranslation("retry"), methodName$)  
        else 
            LoginDialogBuilder.addSubmitButton(wnd!, I18n.getTranslation("return-to-login"), "gotoLogin")
        endif
    methodend

    method public void buildNewPwContent(LoginDialogWindow wnd!, BBjString token!)
       LoginDialogBuilder.addLogo(wnd!, #logoURL$)
       LoginDialogBuilder.addPageTitle(wnd!, I18n.getTranslation("choose-a-new-password"))
       if #isValidationEnabled! = Boolean.TRUE then
            if #passwordValidator! = null() then 
                #passwordValidator! = new NewPasswordValidator()
                LoginDialogBuilder.addPasswordInput(wnd!, #passwordValidator!, "New Password", "new password", Boolean.TRUE)
            fi
       else
            LoginDialogBuilder.addPasswordInput(wnd!, null(), "New Password", "new password", Boolean.TRUE)
       fi
       repeatPasswordText! = I18n.getTranslation("repeat-password")
       LoginDialogBuilder.addRepeatPasswordInput(wnd!, new RepeatPasswordValidator(), repeatPasswordText!, repeatPasswordText!)
       LoginDialogBuilder.addSubmitButton(wnd!, I18n.getTranslation("set-password"), "setPasswordWithToken")
    methodend

    
    rem |||||| REDIRECTS ||||||
    method public void gotoForgotPassword()   
        if #authRenewPw! = null() then
            if #loginWindow! <> null() then 
                #loginWindow!.getContent().destroy()
                #loginWindow! = null()
            endif
            #responseWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
            #buildResponseContent(#responseWindow!, "", I18n.getTranslation("something-went-wrong") , I18n.getTranslation("it-seems-you-cannot-use-this-functionality"), Boolean.FALSE, "")  
        else  
            declare BBjString user$
           
            if #loginWindow! <> null() then 
                user$ = #loginWindow!.getUsername().getInputField().getText()

                #loginWindow!.getContent().destroy()
                #loginWindow! = null()
            endif
    
            #forgotPwWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
            #buildForgotPwContent(#forgotPwWindow!, user$)
        endif
    methodend

    method public void gotoLogin()
        #gotoLogin("")
    methodend

    method public void gotoLogin(BBjString loginResponse$)
        declare BBjString user$
        if #loginWindow! <> null() then 
            user$ = #loginWindow!.getUsername().getInputField().getText()
            #loginWindow!.getContent().destroy()
            #loginWindow! = null()
        endif

        if #forgotPwWindow! <> null() then 
            user$ = #forgotPwWindow!.getUsername().getInputField().getText()
            #forgotPwWindow!.getContent().destroy()
            #forgotPwWindow! = null()
        endif

        if #responseWindow! <> null() then  
            #responseWindow!.getContent().destroy()
            #responseWindow! = null()
        endif

        if user$ <> "" then
            #loginWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
            #buildLoginContent(#loginWindow!, user$) 
        else
            #loginWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
            #buildLoginContent(#loginWindow!, user$)   
        endif
    methodend

    method public void gotoNewPassword(BBjString tempPw$)
        if #responseWindow! <> null() then  
            #responseWindow!.getContent().destroy()
            #responseWindow! = null()
        endif

        #newPwWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
        #buildNewPwContent(#newPwWindow!,tempPw$)    
    methodend


    rem ||||||| API REQUESTS ||||||
    method public void requestForgotPasswordToken(BBjString username$)
        response$ = #authRenewPw!.requestForgotPasswordToken(username$)
   
        if #forgotPwWindow! <> null() then 
            #forgotPwWindow!.getContent().destroy()
            #forgotPwWindow! = null()
        endif

        #responseWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
        #buildResponseContent(#responseWindow!, username$, I18n.getTranslation("password-token-sent") ,response$, Boolean.FALSE, "")    
    methodend	

    method public void setPasswordWithToken(BBjString password$)
        tempPW$ = ClientUtil.getUrlAnchor()
        response! = #authRenewPw!.setPasswordWithToken(tempPw$, password$)

        if #newPwWindow! <> null() then 
            #newPwWindow!.getContent().destroy()
            #newPwWindow! = null()
        endif

        if response! then
            #responseWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
            #buildResponseContent(#responseWindow!, username$, I18n.getTranslation("password-been-changed"), I18n.getTranslation("you-may-now-login-with-your-new-user-credentials"), Boolean.FALSE, "")    
        else 
            #responseWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
            #buildResponseContent(#responseWindow!, username$, I18n.getTranslation("something-went-wrong"), I18n.getTranslation("password-has-not-been-reset-please-try-again") , Boolean.TRUE, "gotoNewPassword")  
        endif
        
    methodend

classend

token$ = BBjAPI().getThinClient().getUserProperty(0,"remember",err=*next)
if token$>"" then 
    if msgbox("Clear Remember Token??",36,"Token") = 6 then
        LoginDialog.clearRememberToken()
    fi
fi

l! = new LoginDialog(new SampleAuthProvider())
l!.setAllowRemember(Boolean.TRUE)

if l!.doModal() then
    a=msgbox(l!.getUser(),0,"SUCCESS")
fi
