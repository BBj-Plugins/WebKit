use ::BBjWidget/BBjWidget.bbj::BBjWidget
use ::WebKit/util/DynamicLoader.bbj::DynamicLoader
use ::WebKit/util/ClientUtil.bbj::ClientUtil
use ::WebKit/widgets/InputField/InputField.bbj::InputField
use ::WebKit/framework/LoginDialog/SampleAuthProvider.bbj::SampleAuthProvider
use ::AuthKit/profile/GoogleAccountProfile.bbj::GoogleAccountProfile
use ::AuthKit/profile/MicrosoftAccountProfile.bbj::MicrosoftAccountProfile
use ::AuthKit/profile/AccountProfile.bbj::AccountProfile
use ::AuthKit/widgets/GoogleLoginWidget.bbj::GoogleLoginWidget
use ::AuthKit/widgets/MicrosoftLoginWidget.bbj::MicrosoftLoginWidget
use ::AuthKit/totp/TOTP.bbj::TOTP
use ::WebKit/framework/LoginDialog/IAuthProvider.bbj::IAuthProvider
use ::WebKit/framework/LoginDialog/IAuthProvider.bbj::IAuthForgotPwProvider
use ::WebKit/framework/LoginDialog/LoginDialogBuilder.bbj::LoginDialogBuilder


class public LoginDialog

    field public static BBjNumber ON_LOGIN = 800001
    field private IAuthProvider authProvider!
 
    field private BBjTopLevelWindow window!
    
    field private BBjChildWindow loginWrapper!
    field private LoginDialogBuilder loginContent!
    
    field private BBjChildWindow forgotWrapper!
    field private LoginDialogBuilder forgotContent!

    field private BBjChildWindow afterForgotWrapper!
    field private LoginDialogBuilder afterForgotContent!

    field private BBjChildWindow newpwWrapper!
    field private LoginDialogBuilder newpwContent!
    
    field private BBjSysGui sysGui!
    field public BBjString User$ = ""
    field public Boolean AllowRemember! = Boolean.FALSE
    
    field public Boolean LoginWithMicrosoft! = Boolean.FALSE
    field public Boolean LoginWithGoogle! = Boolean.FALSE

    field private InputField password! 
    field private InputField username! 
    field private AccountProfile Profile!
    field private BBjString logoURL$
    
    method public LoginDialog()
    methodend
      
    method public LoginDialog(BBjString title$, IAuthProvider authProvider!)  
        #authProvider! = authProvider!
        bbjutils! = new ::BBUtils.bbj::BBUtils()
        DynamicLoader.addLocalCSS("WebKit/framework/LoginDialog/LoginDialog.css")

        #sysGui! = BBjAPI().openSysGui("X0")
        #window! = #sysGui!.addWindow(#sysGui!.getAvailableContext(),25,25,1200,750, title$, $01101083$)
        #window!.addPanelStyle("loginWrapperPanelStyle")
    methodend

    method public void setLogo(BBjString logo$)
        #logoURL$ = logo$
    methodend
    
    method public void buildLoginContent()
        #loginWrapper! = #window!.addChildWindow(#window!.getAvailableControlID(),0,0,0,0,"",$00100800$,BBjAPI().getSysGui().getAvailableContext())
        #loginWrapper!.addPanelStyle("loginWidgetPanelStyle")
        
        #loginContent! = new LoginDialogBuilder(#this!,#loginWrapper!)
        #loginContent!.addLogo(#logoURL$)
        #loginContent!.addUsernameInput("Username")
        #loginContent!.addPasswordInput("Password", "password")
        #loginContent!.addRememberMeBox()
        #loginContent!.addFeedback("Invalid username and password combination.")
        #loginContent!.addSubmitButton("Login", "login")
        #loginContent!.addRedirect("Forgot Password", "gotoForgotPassword")      
    methodend
    
    method public void buildForgotContent(BBjString username$)
        #forgotWrapper! = #window!.addChildWindow(#window!.getAvailableControlID(),0,0,0,0,"",$00100800$,BBjAPI().getSysGui().getAvailableContext())
        #forgotWrapper!.addPanelStyle("loginWidgetPanelStyle")
                
        #forgotContent! = new LoginDialogBuilder(#this!,#forgotWrapper!)
        #forgotContent!.addLogo(#logoURL$)
        #forgotContent!.addPageTitle("Request a new password")
        if username$ = "" then
            #forgotContent!.addUsernameInput("Email Address")
        else
            #forgotContent!.addUsernameInput("Email Address", username$)
        endif 
        #forgotContent!.addSubmitButton("Send Email", "requestForgotPasswordToken", "")
        #forgotContent!.addRedirect("Return to Login", "gotoLogin")  
    methodend

    method public void buildAfterForgotContent(BBjString memory$, BBjString response$)
        #afterForgotWrapper! = #window!.addChildWindow(#window!.getAvailableControlID(),0,0,0,0,"",$00100800$,BBjAPI().getSysGui().getAvailableContext())
        #afterForgotWrapper!.addPanelStyle("loginWidgetPanelStyle")
           
        #afterForgotContent! = new LoginDialogBuilder(#this!,#afterForgotWrapper!, memory$)
        #afterForgotContent!.addLogo(#logoURL$)
        #afterForgotContent!.addTextField(response$)
        #afterForgotContent!.addSubmitButton("Resend Email", "requestForgotPasswordToken", "")
        #afterForgotContent!.addRedirect("Return to Login", "gotoLogin")  
    methodend

    method public void buildNewPwContent(BBjString token!)
        #newpwWrapper! = #window!.addChildWindow(#window!.getAvailableControlID(),0,0,0,0,"",$00100800$,BBjAPI().getSysGui().getAvailableContext())
        #newpwWrapper!.addPanelStyle("loginWidgetPanelStyle")
                
        #newpwContent! = new LoginDialogBuilder(#this!,#newpwWrapper!)
        #newpwContent!.addLogo(#logoURL$)
        #newpwContent!.addPageTitle("Choose a new password")
        #newpwContent!.addPasswordInput("New Password", "password")
        #newpwContent!.addRepeatPasswordInput("Repeat Password", "password")
        #newpwContent!.addFeedback("test")
        #newpwContent!.addSubmitButton("Set Password", "setPasswordWithToken", "")
    methodend

    method public Boolean doModal()

        if #AllowRemember! then
            token$ = BBjAPI().getThinClient().getUserProperty(0,"remember",err=*next)
            if token$>"" and #authProvider!.checkToken(token$) then
                token$ = #authProvider!.getToken()
                BBjAPI().getThinClient().setUserProperty(0,"Strict","remember",token$)
                #User$ = #authProvider!.getUser()
                methodret Boolean.TRUE
            fi
        fi  
        
        rem auto. goto New Password screen with token-url
        rem TODO more options for other renew password methods
        if ClientUtil.getUrlAnchor() = "" then 
            #buildLoginContent()
        else 
            if Boolean.TRUE then    rem check if Token is valid
                #buildNewPwContent(token!)
            endif
        endif

        process_events

        login:
            user$=#loginContent!.getUsername().getText(0)
            pass$=#loginContent!.getPassword().getText(1)
                
                if #authProvider!.checkLogin(user$,pass$) then
                    #User$ = user$
                    if rememberMe! <> null() AND rememberMe!.isSelected() then
                        token$ = #authProvider!.getToken()
                        BBjAPI().getThinClient().setUserProperty(0,"Strict","remember",token$)
                    fi
                    methodret Boolean.TRUE
                else
                    #loginContent!.getFeedback().setStyle("display", "block")
                fi
                return
           
           onGoogleLogin:
           onMicrosoftLogin:
                ev! = BBjAPI().getLastEvent()
                profile! = ev!.getObject()
                if #authProvider!.checkLoginWithAccountProfile(profile!) then
                    #User$ = str(profile!.getFullName())
                    #Profile! = CAST(AccountProfile,profile!)
                    #window!.destroy()
                    methodret Boolean.TRUE
                fi
                return

  
    methodend
    
    method public void requestForgotPasswordToken(BBjButtonPushEvent event!)
        user$=#forgotContent!.getUsername().getText(0)
       
        rem TODO some checks to validate its an emailaddress (on modify event)

        response$ = #authProvider!.requestForgotPasswordToken(user$)

        if response$ = "" then
            a = msgbox("Something wen't wrong requesting a new password.") 
            #gotoLogin()
            rem TODO add eroor message to signal something went wrong
        else 
            if #forgotWrapper! <> null() then #forgotWrapper!.setStyle("display", "none")   
            endif  
            #buildAfterForgotContent(user$, response$) 
        endif
    methodend	

    method public void setPasswordWithToken(BBjButtonPushEvent event!)
        token$ = ClientUtil.getUrlAnchor()

        pw1! = #newpwContent!.getPassword().getText(0)
        pw2! = #newpwContent!.getRepeatPassword().getText(0)
        

        if pw1!.length() < 2 then
            #newpwContent!.setFeedback("Password is too short.")
            #newpwContent!.getFeedback().setStyle("display", "block")
        else    
            if pw1! = pw2! then
                 
                if  #authProvider!.setPasswordWithToken(token$, pw1$) then    
                    let x=MSGBOX("password changed", 0, "No Title")

                    rem TODO if succes return to Login? maybe with message confirming password has been set or window in between

                endif
            else 
                #newpwContent!.setFeedback("Passwords don't match.")
                #newpwContent!.getFeedback().setStyle("display", "block")
            endif

        endif
    methodend




REM  |||||||||||||| 
REM    REDIRECTS  
REM  |||||||||||||| 
    
    method public void gotoForgotPassword(BBjMouseDownEvent event!) 
        #gotoForgotPassword()  
    methodend
    
    method public void gotoForgotPassword()   
        if #loginWrapper! <> null() then #loginWrapper!.setStyle("display", "none")
        if #afterForgotWrapper! <> null() then #afterForgotWrapper!.setStyle("display", "none")
        if #newpwWrapper! <> null() then #newpwWrapper!.setStyle("display", "none")
             
        if #forgotWrapper! <> null() then   
            #forgotWrapper!.setStyle("display", "block")
        else 
            user$ = #loginContent!.getUsername().getText(0)
            #buildForgotContent(user$)
        endif
    methodend
    
    method public void gotoLogin(BBjMouseDownEvent event!)
        #gotoLogin()
    methodend

    method public void gotoLogin()
        if #forgotWrapper! <> null() then #forgotWrapper!.setStyle("display", "none")
        if #afterForgotWrapper! <> null() then #afterForgotWrapper!.setStyle("display", "none")
        if #newpwWrapper! <> null() then #newpwWrapper!.setStyle("display", "none")
        
        if #loginWrapper! <> null() then 
            #loginWrapper!.setStyle("display", "block")
        else 
            #buildLoginContent()
        endif
    methodend

    method public AccountProfile getProfile()
        methodret #Profile!
    methodend
    
    method public static void clearRememberToken()
        BBjAPI().getThinClient().setUserProperty(0,"Strict","remember",token$)
    methodend

classend

token$ = BBjAPI().getThinClient().getUserProperty(0,"remember",err=*next)
if token$>"" then 
    if msgbox("Clear Remember Token??",36,"Token") = 6 then
        LoginDialog.clearRememberToken()
    fi
fi

l! = new LoginDialog(new SampleAuthProvider())
l!.setAllowRemember(Boolean.TRUE)

if l!.doModal() then
    a=msgbox(l!.getUser(),0,"SUCCESS")
fi

