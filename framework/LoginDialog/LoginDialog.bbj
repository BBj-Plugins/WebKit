use ::BBjWidget/BBjWidget.bbj::BBjWidget
use ::WebKit/util/DynamicLoader.bbj::DynamicLoader
use ::WebKit/util/ClientUtil.bbj::ClientUtil
use ::WebKit/widgets/InputField/InputField.bbj::InputField
use ::WebKit/framework/LoginDialog/SampleAuthProvider.bbj::SampleAuthProvider
use ::AuthKit/profile/GoogleAccountProfile.bbj::GoogleAccountProfile
use ::AuthKit/profile/MicrosoftAccountProfile.bbj::MicrosoftAccountProfile
use ::AuthKit/profile/AccountProfile.bbj::AccountProfile
use ::AuthKit/widgets/GoogleLoginWidget.bbj::GoogleLoginWidget
use ::AuthKit/widgets/MicrosoftLoginWidget.bbj::MicrosoftLoginWidget
use ::AuthKit/totp/TOTP.bbj::TOTP

use ::WebKit/widgets/InputField/IFieldReq.bbj::IFieldReq
use ::WebKit/widgets/InputField/DefaultFieldReq.bbj::DefaultFieldReq
use ::WebKit/framework/LoginDialog/IAuthProvider.bbj::IAuthProvider
use ::WebKit/framework/LoginDialog/IAuthRenewPwProvider.bbj::IAuthRenewPwProvider
use ::WebKit/framework/LoginDialog/LoginDialogBuilder.bbj::LoginDialogBuilder
use ::WebKit/framework/LoginDialog/LoginDialogWindow.bbj::LoginDialogWindow


class public LoginDialog

    field public static BBjNumber ON_LOGIN = 800001
    field private IAuthProvider authProvider!
    field private IAuthRenewPwProvider authRenewPw!
    field private IFieldReq fieldReq!
 
    field private BBjSysGui sysGui!
    field private BBjTopLevelWindow window!
    field private BBjWindow loginWrapper!
    
    field private LoginDialogWindow loginWindow!
    field private LoginDialogWindow forgotPwWindow!
    field private LoginDialogWindow pwSentWindow!
    field private LoginDialogWindow newPwWindow!

    field public BBjString User$ = ""

    field public Boolean AllowRemember! = Boolean.FALSE
    field public Boolean AllowForgotPw! = Boolean.FALSE
    field public Boolean LoginWithMicrosoft! = Boolean.FALSE
    field public Boolean LoginWithGoogle! = Boolean.FALSE

    field private AccountProfile Profile!
    field private BBjString logoURL$
    
    rem |||||| CONSTRUCTORS ||||||
    method public LoginDialog()
    methodend
    
    method public LoginDialog(BBjString title$, IAuthProvider authProvider!)
        #this!(title$, authProvider!, new DefaultFieldReq()) 
    methodend

    method public LoginDialog(BBjString title$, IAuthProvider authProvider!, IFieldReq fieldReq!)
        bbjutils! = new ::BBUtils.bbj::BBUtils()
        DynamicLoader.addLocalCSS("WebKit/framework/LoginDialog/LoginDialog.css")

        #sysGui! = BBjAPI().openSysGui("X0")
        #window! = #sysGui!.addWindow(#sysGui!.getAvailableContext(),25,25,1200,750, title$, $01101083$)
        #window!.addPanelStyle("loginWrapperPanelStyle") 
        #loginWrapper! = #window!.addChildWindow(#window!.getAvailableControlID(),0,0,0,0,"",$00100800$,BBjAPI().getSysGui().getAvailableContext()) 
        #loginWrapper!.addPanelStyle("loginWidgetPanelStyle")

        checkAuthRenewPwProvider! = cast(IAuthRenewPwProvider,authProvider!,err=*next)

        if checkAuthRenewPwProvider! <> null() then
            #AllowForgotPw! = Boolean.TRUE
        endif

        #fieldReq! = fieldReq!
    methodend

    rem |||||| GETTER & SETTER ||||||
    method public void setLogo(BBjString logo$)
        #logoURL$ = logo$
    methodend

    method public LoginDialogWindow getLoginWindow()
        methodret #loginWindow!
    methodend

    method public AccountProfile getProfile()
        methodret #Profile!
    methodend

    method public static void clearRememberToken()
        BBjAPI().getThinClient().setUserProperty(0,"Strict","remember",token$)
    methodend

    rem |||||| CONTENT BUILDERS ||||||
    method public void buildLoginContent(LoginDialogWindow wnd!)       
        LoginDialogBuilder.addLogo(wnd!,#logoURL$)
        LoginDialogBuilder.addUsernameInput(wnd!, #fieldReq!, "Username")
        LoginDialogBuilder.addPasswordInput(wnd!, #fieldReq!,"Password", "Your password")
        if #AllowRemember! = Boolean.TRUE then LoginDialogBuilder.addRememberMeBox(wnd!)
        LoginDialogBuilder.addFeedback(wnd!,"Invalid username and password combination.")
        LoginDialogBuilder.addSubmitButton(wnd!, "Company Overview", "login")
        if #AllowForgotPw! = Boolean.TRUE then LoginDialogBuilder.addRedirect(wnd!, "Forgot your Password?", "gotoForgotPassword")   
    methodend

    method public void buildForgotPwContent(LoginDialogWindow wnd!, BBjString memory$)
        LoginDialogBuilder.addLogo(wnd!,#logoURL$)
        LoginDialogBuilder.addPageTitle(wnd!,"Request a new password")
        LoginDialogBuilder.addUsernameInput(wnd!, #fieldReq!, "Username")
        LoginDialogBuilder.addSubmitButton(wnd!, "Send Email", "requestForgotPasswordToken", "temp")
        LoginDialogBuilder.addRedirect(wnd!, "Return to Login", "gotoLogin")  
    methodend

    method public void buildPwSentContent(LoginDialogWindow wnd!, BBjString memory$, BBjString response$)
        LoginDialogBuilder.addMemory(wnd!, memory$)
        LoginDialogBuilder.addLogo(wnd!, #logoURL$)
        LoginDialogBuilder.addTextField(wnd!, response$)
        LoginDialogBuilder.addSubmitButton(wnd!, "Resend Email", "requestForgotPasswordToken", "temp")
        LoginDialogBuilder.addRedirect(wnd!, "Return to Login", "gotoLogin")  
    methodend

    method public void buildNewPwContent(LoginDialogWindow wnd!, BBjString token!)
       LoginDialogBuilder.addLogo(wnd!, #logoURL$)
       LoginDialogBuilder.addPageTitle(wnd!, "Choose a new password")
       LoginDialogBuilder.addPasswordInput(wnd!, #fieldReq!, "New Password", "password")
       LoginDialogBuilder.addRepeatPasswordInput(wnd!, "Repeat Password", "password")
       LoginDialogBuilder.addFeedback(wnd!, "test")
       LoginDialogBuilder.addSubmitButton(wnd!, "Set Password", "setPasswordWithToken", "temp")
    methodend

    rem |||||| REDIRECTS ||||||
    method public void gotoForgotPassword()   
        declare BBjString user$
        if #loginWindow! <> null() then 
            user$ = #loginWindow!.getUsername().getText(0)
            #loginWindow!.getContent().destroy()
            #loginWindow! = null()
        endif
  
        #forgotPwWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
        #buildForgotPwContent(#forgotPwWindow!, user$)
    methodend

    method public void gotoLogin()
        declare BBjString user$

        if #forgotPwWindow! <> null() then 
            user$ = #forgotPwWindow!.getUsername().getText(0)
            #forgotPwWindow!.getContent().destroy()
            #forgotPwWindow! = null()
        endif
        if #pwSentWindow! <> null() then  
            #pwSentWindow!.getContent().destroy()
            #pwSentWindow! = null()
        endif


        #loginWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
        #buildLoginContent(#loginWindow!, user$, "")    
    methodend

    method public Boolean doModal()

        if #AllowRemember! then
            token$ = BBjAPI().getThinClient().getUserProperty(0,"remember",err=*next)
            if token$>"" and #authProvider!.checkToken(token$) then
                token$ = #authProvider!.getToken()
                BBjAPI().getThinClient().setUserProperty(0,"Strict","remember",token$)
                #User$ = #authProvider!.getUser()
                methodret Boolean.TRUE
            fi
        fi  
   
        tempPw$ = ClientUtil.getUrlAnchor()
        if tempPw$ = "" then 
            #loginWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
            #buildLoginContent(#loginWindow!)
        else 
            if Boolean.TRUE then    rem check if Token is valid
                #newPwWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
                #buildNewPwContent(#newPwWindow!,tempPw$)
            endif
        endif

        process_events

        login:
            user$=#loginWindow!.getUsername().getText(0)
            pass$=#loginWindow!.getPassword().getText(1)
                
                if #authProvider!.checkLogin(user$,pass$) then
                    #User$ = user$
                    if rememberMe! <> null() AND rememberMe!.isSelected() then
                        token$ = #authProvider!.getToken()
                        BBjAPI().getThinClient().setUserProperty(0,"Strict","remember",token$)
                    fi
                    methodret Boolean.TRUE
                else
                    a=msgbox("bad credentials")
                    rem #loginWindow!.getFeedback().setStyle("display", "block")
                fi
                return
           
           onGoogleLogin:
           onMicrosoftLogin:
                ev! = BBjAPI().getLastEvent()
                profile! = ev!.getObject()
                if #authProvider!.checkLoginWithAccountProfile(profile!) then
                    #User$ = str(profile!.getFullName())
                    #Profile! = CAST(AccountProfile,profile!)
                    #window!.destroy()
                    methodret Boolean.TRUE
                fi
                return
    methodend

    rem ||||||| API REQUESTS ||||||
    method public void requestForgotPasswordToken(BBjString username$)
        response$ = #authProvider!.requestForgotPasswordToken(username$)
   
        if #forgotPwWindow! <> null() then 
            #forgotPwWindow!.getContent().destroy()
            #forgotPwWindow! = null()
        endif
        if #pwSentWindow! <> null() then 
            #pwSentWindow!.getContent().destroy()
            #pwSentWindow! = null()
            #pwSentWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
            #buildPwSentContent(#pwSentWindow!, username$, "Email opnieuw verzonden." ) 
        else 
            #pwSentWindow! = new LoginDialogWindow(#this!, #loginWrapper!)
            #buildPwSentContent(#pwSentWindow!, username$, response$)    
        endif
    methodend	

    method public void setPasswordWithToken(BBjString password$)
        tempPW$ = ClientUtil.getUrlAnchor()
        username$ = "ian.hupkes@prodin.nl"
        res! = #authProvider!.setPasswordWithToken(username$, tempPw$, password$)

        if res! then  let x=MSGBOX("password changed", 0, "No Title")
    methodend

classend

token$ = BBjAPI().getThinClient().getUserProperty(0,"remember",err=*next)
if token$>"" then 
    if msgbox("Clear Remember Token??",36,"Token") = 6 then
        LoginDialog.clearRememberToken()
    fi
fi

l! = new LoginDialog(new SampleAuthProvider())
l!.setAllowRemember(Boolean.TRUE)

if l!.doModal() then
    a=msgbox(l!.getUser(),0,"SUCCESS")
fi

