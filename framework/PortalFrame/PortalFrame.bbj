use ::WebKit/util/DynamicLoader.bbj::DynamicLoader
use ::WebKit/widgets/IconTile/IconTile.bbj::IconTile
use ::WebKit/model/Menu.bbj::Menu
use ::WebKit/model/Menu.bbj::MenuItem
use ::WebKit/framework/TreeListPanel/TreeListPanel.bbj::TreeListPanel
use ::WebKit/framework/EmbedPanel/EmbedPanel.bbj::EmbedPanel
use ::BBjWidget/BBjWidget.bbj::BBjWidget
use ::WebKit/framework/LoginDialog/LoginDialog.bbj::LoginDialog
use ::WebKit/util/ClientUtil.bbj::ClientUtil
use ::WebKit/util/Icons.bbj::Icons
use ::AuthKit/profile/AccountProfile.bbj::AccountProfile

use ::WebKit/widgets/Drawer/Drawer.bbj::Drawer
use ::WebKit/model/DrawerMenuTileEntry.bbj::DrawerMenuTileEntry
use ::WebKit/widgets/TilesTextHeader/TilesTextHeader.bbj::TilesTextHeader
use ::WebKit/model/DrawerModel.bbj::DrawerModel

use ::WebKit/i8n/I18n.bbj::I18n
use java.util.HashMap

class public PortalFrame

    field private BBjTopLevelWindow window!
    field private Drawer Drawer!
    field private BBjChildWindow Main!
    field private BBjChildWindow AccountDisplay!
    field private BBjChildWindow Avatar!
    
    field public BBjString Username!
    field public BBjString Title!
    field public Menu Menu! = new Menu()
    field public Menu FooterMenu! = new Menu()
    field public Menu HeaderMenu! = new Menu()
    field public Menu HiddenMenu! = new Menu()
    field public AccountProfile Profile!
    
    field private Boolean drawerOpen! = Boolean.FALSE
    field private HashMap win_list! = new HashMap()
    field private BBjWidget curr_win! 
    field private TreeListPanel menuPanel!

    field private BBjPopupMenu AccountMenu!

    field public BBjString LogoUrl!
    field public BBjString LogoSmallUrl!
    
    field private static PortalFrame ThisInstance!

    method public PortalFrame()
        DynamicLoader.addLocalCSS("WebKit/framework/PortalFrame/PortalFrame.css")
        #ThisInstance! = #this!

        dark$="0"
        dark$=BBjAPI().getThinClient().getUserProperty(USER_PROPERTIES_COOKIES,"DarkMode",err=*next)
        if dark$>"0" then
            ClientUtil.setDarkMode(Boolean.TRUE)
            BBjAPI().getThinClient().setUserProperty(USER_PROPERTIES_COOKIES ,"DarkMode",dark$)
        fi        
        
    methodend
    
    method public static PortalFrame getInstance()
        if #ThisInstance! = null() then
            #ThisInstance! = new PortalFrame()
        fi
        methodret #ThisInstance!
    methodend

    method protected void initializeDrawer(Menu menu!, Menu footerMenu!, Menu headerMenu!)
        declare BBjVector menuTiles!
        declare TilesTextHeader header!

        declare DrawerModel drawerDataModel!
        drawerDataModel! = new DrawerModel()
        drawerDataModel!.setLogoUrl(#LogoUrl!)
        drawerDataModel!.setLogoSmallUrl(#LogoSmallUrl!)
        drawerDataModel!.setTilesTextHeader("Browse")
        drawerDataModel!.setOpenIcon(Icons.get("chevron-right"))
        drawerDataModel!.setCloseIcon(Icons.get("chevron-left"))
        
        drawerDataModel!.setAvatarUrl("/files/prodinRes/drawerAvatar.png")
        
        if #Profile! <> null() then
            drawerDataModel!.setAvatarUrl(#Profile!.getPictureUrl())
            drawerDataModel!.setFooterTitle(#Profile!.getFullName())
            drawerDataModel!.setFooterSubTitle(#Profile!.getEMail())
        fi
        
        menuTiles! = new BBjVector()
        footerMenuTiles! = new BBjVector()
        headerMenuTiles! = new BBjVector()

        menuitems! = menu!.getChildren(menu!.getRoot()) 
        it! = menuitems!.iterator()
        while it!.hasNext()
            declare auto MenuItem menuitem!
            menuitem! = it!.next()
            id% = menuitem!.getNodeId()
            menuTiles!.add(new DrawerMenuTileEntry(id%, menuitem!.getCaption(), menuitem!.getIcon()))
            REM btn! = new IconTile(#Drawer!,id%)
            REM btn!.setText(menuitem!.getCaption())
            REM btn!.setIcon(menuitem!.getIcon())
            REM btn!.setToolTip(menuitem!.getToolTip())
            REM btn!.setCallback(BBjAPI.ON_BUTTON_PUSH,#this!,"onMenuItemClick")
        wend

        REM initialize footerMenu
        
        rem TODO: finish Dark Mode 
        rem https://github.com/BBj-Plugins/WebKit/issues/90
REM         footerMenuItem! = footerMenu!.addMenuItem(footerMenu!.getRoot(),498,"Switch Theme","Switch application theme","moon")
REM         footerMenuItem!.setProgram("void")
REM         footerMenuItem!.setCallback("onChangeTheme")
        logoutIcon$ = "log-out"
        if STBL("icon-pool") = "tabler" then
            logoutIcon$ = "logout"
        fi
        footerMenuItem! = footerMenu!.addMenuItem(footerMenu!.getRoot(),499,"Log Out","Log Out", logoutIcon$)
        footerMenuItem!.setProgram("void")
        footerMenuItem!.setCallback("onLogout")
        footerMenuItems! = footerMenu!.getChildren(footerMenu!.getRoot())
        it! = footerMenuItems!.iterator()

        while it!.hasNext()
            declare auto MenuItem footerMenuItem!
            footerMenuItem! = it!.next()
            id% = footerMenuItem!.getNodeId()
            footerMenuTiles!.add(new DrawerMenuTileEntry(id%, footerMenuItem!.getCaption(), footerMenuItem!.getIcon()))
        wend
        drawerDataModel!.setFooterMenuTiles(footerMenuTiles!)


        REM initialize header menu items
        headerMenuItems! = headerMenu!.getChildren(headerMenu!.getRoot())
        it! = headerMenuItems!.iterator()

        while it!.hasNext()
            declare auto MenuItem headerMenuItem!
            headerMenuItem! = it!.next()
            id% = headerMenuItem!.getNodeId()
            headerMenuTiles!.add(new DrawerMenuTileEntry(id%, headerMenuItem!.getCaption(), headerMenuItem!.getIcon()))
        wend
        drawerDataModel!.setHeaderMenuTiles(headerMenuTiles!)
    
        drawerDataModel!.setMenuTiles(menuTiles!)
        #Drawer! = #createDrawerObject(#window!, drawerDataModel!)
        #Drawer!.setCallback(Drawer.ON_DRAWER_TILE_PRESSED, #this!, "onMenuItemClick")
        #Drawer!.setCallback(Drawer.ON_DRAWER_FOOTER_TILE_PRESSED, #this!, "onFooterMenuItemClick")
        #Drawer!.setCallback(Drawer.ON_DRAWER_HEADER_TILE_PRESSED, #this!, "onHeaderMenuItemClick")
        #Drawer!.setCallback(Drawer.ON_DRAWER_STATE_CHANGED, #this!, "onDrawerToggle")
        #Drawer!.setCallback(Drawer.ON_LOGOUT, "logout")
        
        header! = new TilesTextHeader(#Drawer!.getOptionalControlAboveTiles(), drawerDataModel!.getTilesTextHeader())
        
        header!.setDockStyle("grid-row-start","1")
        header!.setDockStyle("height", "30px")
        header!.setDockStyle("margin-bottom","8px")
        header!.setDockStyle("margin-top","24px")
        header!.setDockStyle("margin-left","40px")
        header!.addTextStyle("drawerTilesTextHeaderStyle")
        header!.setTextStyle("display","block")
    methodend
    
    rem /**
    rem  * createDrawerObject
    rem  * override this method if you want to create a custom drawer class 
    rem  * that extends Drawer 
    rem  */
    method protected Drawer createDrawerObject(BBjWindow window!, DrawerModel drawerDataModel!)
        methodret new Drawer(window!, drawerDataModel!)
    methodend
    
    method public Boolean doModal()

            sysgui! =BBjAPI().openSysGui("X0")
            
            #window! = CAST(BBjTopLevelWindow, sysgui!.addWindow(sysgui!.getAvailableContext(),25,25,1200,750,#Title!,$01101083$))
            
            rem add one invisible button to force the BASIS variables to be loaded for CSS            
            #window!.addButton(1000,0,0,0,0,"TEST",$0010$ )
            
            
            main! = #window!.addChildWindow(#window!.getAvailableControlID(),0,0,100,80,"",$00100800$,sysgui!.getAvailableContext())
            main!.addStyle("mainarea")
            #Main! = cast(BBjChildWindow,main!)
            #Main!.addStyle("shrinked")
             
            #initializeDrawer(#Menu!, #FooterMenu!, #HeaderMenu!)
           
            BBjAPI().setCustomEventCallback("logout","logout")
            
            
            anchor$ = ClientUtil.getUrlAnchor()
            if anchor$>"" then
                #navigateTo(anchor$)
            fi

                    
            process_events,err=*same
            
            logout:
                ClientUtil.setUrlAnchor("", "")
                methodret 1
            
    methodend
    
    method public BBjWidget navigateTo(BBjString anchor$)
    
        item! = #HeaderMenu!.getItem(anchor$)
        if item! <> null() then
            methodret #navigateTo(item!)
        fi
        
        item! = #Menu!.getItem(anchor$)
        if item! <> null() then
            methodret #navigateTo(item!)
        fi
        
        item! = #FooterMenu!.getItem(anchor$)
        if item! <> null() then
            methodret #navigateTo(item!)
        fi

        item! = #HiddenMenu!.getItem(anchor$)
        if item! <> null() then
            methodret #navigateTo(item!)
        fi
       
        methodret item!
        
   methodend
   
    rem /**
    rem  * this method navigates to the menu item with the given ID
    rem  * it assumes that the IDs are unique across the four menu structures
    rem  * It's left to the developer to ensure this uniqueness
    rem  */
    method public BBjWidget navigateTo(BBjNumber id)
    
        item! = #HeaderMenu!.getItem(id)
        if item! <> null() then
            methodret #navigateTo(item!)
        fi
        
        item! = #Menu!.getItem(id)
        if item! <> null() then
            methodret #navigateTo(item!)
        fi
        
        item! = #FooterMenu!.getItem(id)
        if item! <> null() then
            methodret #navigateTo(item!)
        fi

        item! = #HiddenMenu!.getItem(id)
        if item! <> null() then
            methodret #navigateTo(item!)
        fi
       
        methodret item!
        
   methodend   

    method public void onMenuItemClick(BBjCustomEvent ev!)
        nodeId=num(str(ev!.getObject()))
        item! = #Menu!.getItem(nodeId)
        #navigateTo(item!)
   methodend
    
    method public void onFooterMenuItemClick(BBjCustomEvent ev!)
        nodeId = num(str(ev!.getObject()))
        item! = #FooterMenu!.getItem(nodeId)
        #navigateTo(item!)
    methodend

    method public void onHeaderMenuItemClick(BBjCustomEvent ev!)
        nodeId = num(str(ev!.getObject()))
        item! = #HeaderMenu!.getItem(nodeId)
        #navigateTo(item!)
    methodend

   method public BBjWidget navigateTo(MenuItem item!)
        if #curr_win! <> null() and !#curr_win!.isDestroyed() then
            #curr_win!.setVisible(0)
            #curr_win!=null()
        fi
                
        if item!.hasChildren() then
            if (#menuPanel! = null()) then
                #menuPanel! = new TreeListPanel(#Main!)
                #menuPanel!.setMenu(#Menu!)
                #menuPanel!.setCallback(BBjAPI.ON_BUTTON_PUSH,#this!,"onMenuItemClick")
            fi
            #menuPanel!.setParentNode(item!.getNodeId())
            #menuPanel!.setVisible(1)
            #curr_win! = #menuPanel! 
        else
        
            if #win_list!.containsKey(item!.getNodeId()) then
                #curr_win!= CAST(BBjWidget,#win_list!.get(item!.getNodeId()))
                #curr_win!.redraw(0)
                #curr_win!.setVisible(1)
            else
                pgm$ = item!.getProgram()
                if pgm$ = "void" then
                    callback$ = item!.getCallback()
                    x! = eval("#" + callback$ + "()", err=*next)
                    methodret x!
                fi
                if pgm$>"" then
                    starttype = item!.getStartType()
                    
                    switch starttype
                        case 0
                            x! = null()
                            x! = eval("new "+pgm$+"(#Main!)",err=*next)
                            if x! = null() then
                                a = msgbox("Error starting "+item!.getCaption(),0,"ERROR")
                            else 
                                #curr_win! = CAST(BBjWidget,x!)
                            fi
                            break
                            
                        case 1
                        case 2
                            x! = new EmbedPanel(#Main!)
                            x!.start(item!)
                            #curr_win! = CAST(BBjWidget,x!)
                            x!.setCallback(BBjAPI().ON_CLOSE,#this!,"onEmbedPanelClose")
                            break
                        case default
                            rem ignore
                            break
                    swend
                    if #curr_win! <> null() then
                        #win_list!.put(item!.getNodeId(),#curr_win!)
                    fi
                    
                fi
            fi
        fi
        ClientUtil.setUrlAnchor(item!.getCaption(),item!.getCaption())
        methodret #curr_win!
    methodend
    
    method public void onAvatarAreaClick(BBjEvent ev!)
        #AccountMenu!.show(#Avatar!,5,50)
    methodend
    
  
    method public void onEmbedPanelClose(BBjCustomEvent ev!)
        item! = ev!.getObject()
        nodeId = item!.getNodeId()
        if #win_list!.containsKey(nodeId) then
            #win_list!.remove(nodeId)
        fi
         
    methodend

    method public void onDrawerToggle(BBjCustomEvent ev!)
       state = num(str(ev!.getObject()))
       if state = 1
          #Main!.addStyle("shrinked")
          #Main!.removeStyle("expanded")
       else
          #Main!.addStyle("expanded")
          #Main!.removeStyle("shrinked")
       fi
    methodend

    method public void onToggleMenu(BBjEvent ev!)
    rem drawer_status 0=open, 1=closed
    if #drawerOpen! then
         #drawerOpen!=Boolean.FALSE
         #Drawer!.addStyle("drawerclosed")
         #Drawer!.removeStyle("draweropen")
    else
         #drawerOpen!=Boolean.TRUE
         #Drawer!.addStyle("draweropen")
         #Drawer!.removeStyle("drawerclosed")
    fi
    methodend

    method public void onLogout()
        LoginDialog.clearRememberToken()
        BBjAPI().postCustomEvent("logout", "")
        methodret
    methodend
    
   
    method public void onChangeTheme()
        dark$="0"
        dark$=BBjAPI().getThinClient().getUserProperty(USER_PROPERTIES_COOKIES,"DarkMode",err=*next)
        if dark$>"0" then
            dark$="0"
            ClientUtil.setDarkMode(Boolean.FALSE)
        else
            dark$="1"
            ClientUtil.setDarkMode(Boolean.TRUE)
        fi
        BBjAPI().getThinClient().setUserProperty(USER_PROPERTIES_COOKIES ,"DarkMode",dark$)
    methodend
    
classend



