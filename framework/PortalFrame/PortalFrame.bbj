use ::BBjWidget/BBjWidget.bbj::BBjWidget

use ::WebKit/util/DynamicLoader.bbj::DynamicLoader
use ::WebKit/widgets/IconTile/IconTile.bbj::IconTile
use ::WebKit/model/Menu.bbj::Menu
use ::WebKit/model/Menu.bbj::MenuItem
use ::WebKit/framework/TreeListPanel/TreeListPanel.bbj::TreeListPanel
use ::WebKit/framework/MenuCardPanel/MenuCardPanel.bbj::MenuCardPanel
use ::WebKit/framework/MenuCardPanel/MenuCardPanelSorted.bbj::MenuCardPanelSorted
use ::WebKit/framework/EmbedPanel/EmbedPanel.bbj::EmbedPanel
use ::WebKit/framework/EmbedDWCJCanvas/EmbedDWCJCanvas.bbj::EmbedDWCJCanvas
use ::WebKit/framework/LoginDialog/LoginDialog.bbj::LoginDialog
use ::WebKit/util/ClientUtil.bbj::ClientUtil
use ::WebKit/util/Icons.bbj::Icons
use ::AuthKit/profile/AccountProfile.bbj::AccountProfile

use ::WebKit/widgets/Drawer/Drawer.bbj::Drawer
use ::WebKit/widgets/Appbar/Appbar.bbj::Appbar

use ::WebKit/model/DrawerMenuTileEntry.bbj::DrawerMenuTileEntry
use ::WebKit/widgets/TilesTextHeader/TilesTextHeader.bbj::TilesTextHeader
use ::WebKit/model/DrawerModel.bbj::DrawerModel

use ::WebKit/framework/Favorites/IFavoritesProvider.bbj::IFavoritesProvider
use ::WebKit/framework/Favorites/SampleFavoritesProvider.bbj::SampleFavoritesProvider

use ::WebKit/i8n/I18n.bbj::I18n
use java.util.HashMap

use ::BBjRouter/BBjRouter.bbj::BBjRouterEvent
use ::WebKit/framework/Router/RouterProtocol.bbj::RouterProtocol

use ::WebKit/framework/Router/Router.bbj::Router


class public PortalFrame implements RouterProtocol

    field protected BBjTopLevelWindow window!
    field protected Drawer Drawer!
    field protected BBjChildWindow Main!
    field protected BBjChildWindow AccountDisplay!
    field protected BBjChildWindow Avatar!
    field protected BBjChildWindow dialogWindow!
    
    field public BBjString Username!
    field public BBjString Title!
    field public Menu Menu! = new Menu()
    field public Menu FooterMenu! = new Menu()
    field public Menu HeaderMenu! = new Menu()
    field public Menu HiddenMenu! = new Menu()

    field protected MenuItem startingPanel!
    field protected MenuItem pageNotFoundPanel!
    field public AccountProfile Profile!
    
    field protected Boolean drawerOpen! = Boolean.FALSE
    field protected Boolean drawerHidden! = Boolean.FALSE
    field protected Boolean isMobile! = Boolean.FALSE
    field protected HashMap win_list! = new HashMap()
    field public BBjWidget currWindow! 
    
    
    field protected BBjPopupMenu AccountMenu!
    
    field private IFavoritesProvider favoritesProvider! 

    field public BBjString LogoUrl!
    field public BBjString LogoSmallUrl!
     
    field public boolean ShowHeaderIcon! = Boolean.FALSE
    

    field public static BBjString ON_NAVIGATION$ = "navigation"
    field private Router router!
    field private BBjRouterEvent routerEvent!

    field private BBjSysGui sysgui!
    field private static PortalFrame ThisInstance!
    
    field private Boolean isDwcjInitialized! = Boolean.FALSE
    
    method public PortalFrame()
        DynamicLoader.addLocalCSS("WebKit/framework/PortalFrame/PortalFrame.css")
        #ThisInstance! = #this!

        dark$="0"
        dark$=BBjAPI().getThinClient().getUserProperty(USER_PROPERTIES_COOKIES,"DarkMode",err=*next)
        
        if dark$>"0" then
            ClientUtil.setDarkMode(Boolean.TRUE)
            BBjAPI().getThinClient().setUserProperty(USER_PROPERTIES_COOKIES ,"DarkMode",dark$)
        else 
            ClientUtil.setDarkMode(Boolean.FALSE)
            BBjAPI().getThinClient().setUserProperty(USER_PROPERTIES_COOKIES ,"DarkMode",dark$)
        fi        
        
    methodend
    
    method public static PortalFrame getInstance()
        if #ThisInstance! = null() then
            #ThisInstance! = new PortalFrame()
        fi
        methodret #ThisInstance!
    methodend
    
    method public void setFavoritesProvider(IFavoritesProvider provider!)
        #favoritesProvider! = provider!
    methodend

    method protected void initializeDrawer(Menu menu!, Menu footerMenu!, Menu headerMenu!)
        declare BBjVector menuTiles!
        declare TilesTextHeader header!

        declare DrawerModel drawerDataModel!
        drawerDataModel! = new DrawerModel()
        drawerDataModel!.setLogoUrl(#LogoUrl!)
        drawerDataModel!.setLogoSmallUrl(#LogoSmallUrl!)
        drawerDataModel!.setTilesTextHeader("Browse")
        drawerDataModel!.setOpenIcon(Icons.get("chevron-right"))
        drawerDataModel!.setCloseIcon(Icons.get("chevron-left"))
        drawerDataModel!.setShowHeaderIcon(#ShowHeaderIcon!)
        
        
        
        if #Profile! <> null() then
            drawerDataModel!.setAvatarUrl(#Profile!.getPictureUrl())
            drawerDataModel!.setFooterTitle(#Profile!.getFullName())
            drawerDataModel!.setFooterSubTitle(#Profile!.getEMail())
        fi
        
        menuTiles! = new BBjVector()
        footerMenuTiles! = new BBjVector()
        headerMenuTiles! = new BBjVector()

        menuitems! = menu!.getChildren(menu!.getRoot()) 
        it! = menuitems!.iterator()
        while it!.hasNext()
            declare auto MenuItem menuitem!
            menuitem! = it!.next()
            menuTiles!.add(menuItem!)
            
            
            REM btn! = new IconTile(#Drawer!,id%)
            REM btn!.setText(menuitem!.getCaption())
            REM btn!.setIcon(menuitem!.getIcon())
            REM btn!.setToolTip(menuitem!.getToolTip())
            REM btn!.setCallback(BBjAPI.ON_BUTTON_PUSH,#this!,"onMenuItemClick")
        wend

        REM initialize footerMenu
        
        rem TODO: finish Dark Mode 
        rem https://github.com/BBj-Plugins/WebKit/issues/90
REM         footerMenuItem! = footerMenu!.addMenuItem(footerMenu!.getRoot(),498,"Switch Theme","Switch application theme","moon")
REM         footerMenuItem!.setProgram("void")
REM         footerMenuItem!.setCallback("onChangeTheme")
        logoutIcon$ = "log-out"
        if STBL("icon-pool") = "tabler" then
            logoutIcon$ = "logout"
        fi
        footerMenuItem! = footerMenu!.addMenuItem(footerMenu!.getRoot(),499,"Log Out","Log Out", logoutIcon$)
        footerMenuItem!.setProgram("void")
        footerMenuItem!.setCallback("onLogout")
        footerMenuItems! = footerMenu!.getChildren(footerMenu!.getRoot())
        it! = footerMenuItems!.iterator()

        while it!.hasNext()
            declare auto MenuItem footerMenuItem!
            footerMenuItem! = it!.next()
            id% = footerMenuItem!.getNodeId()
            footerMenuTiles!.add(new DrawerMenuTileEntry(id%, footerMenuItem!.getCaption(), footerMenuItem!.getIcon()))
        wend
        drawerDataModel!.setFooterMenuTiles(footerMenuTiles!)


        REM initialize header menu items
        headerMenuItems! = headerMenu!.getChildren(headerMenu!.getRoot())
        it! = headerMenuItems!.iterator()

        while it!.hasNext()
            declare auto MenuItem headerMenuItem!
            headerMenuItem! = it!.next()
            
            headerMenuTiles!.add(headerMenuItem!)
        wend
        
        #registerPageNotFound()
        
        #router!.registerRoutes()
        
        
        drawerDataModel!.setHeaderMenuTiles(headerMenuTiles!)
    
        drawerDataModel!.setMenuTiles(menuTiles!)
        #Drawer! = #createDrawerObject(#window!, drawerDataModel!,menu!)
        
        #Drawer!.setCallback(Drawer.ON_DRAWER_TILE_PRESSED, #this!, "onMenuItemClick")
        #Drawer!.setCallback(Drawer.ON_DRAWER_FOOTER_TILE_PRESSED, #this!, "onFooterMenuItemClick")
        #Drawer!.setCallback(Drawer.ON_DRAWER_HEADER_TILE_PRESSED, #this!, "onHeaderMenuItemClick")
        #Drawer!.setCallback(Drawer.ON_DRAWER_STATE_CHANGED, #this!, "onDrawerToggle")
        #Drawer!.setCallback(Drawer.ON_LOGOUT, "logout")
        
        rem header! = new TilesTextHeader(#Drawer!.getOptionalControlAboveTiles(), drawerDataModel!.getTilesTextHeader())
        rem 
        rem header!.setDockStyle("grid-row-start","1")
        rem header!.setDockStyle("height", "30px")
        rem header!.setDockStyle("margin-bottom","8px")
        rem header!.setDockStyle("margin-left","40px")
        rem header!.addTextStyle("drawerTilesTextHeaderStyle")
        rem header!.setTextStyle("display","block")
    methodend
    
    rem /**
    rem  * createDrawerObject
    rem  * override this method if you want to create a custom drawer class 
    rem  * that extends Drawer 
    rem  */
    method protected Drawer createDrawerObject(BBjWindow window!, DrawerModel drawerDataModel!,Menu menu!)
        methodret new Drawer(window!, drawerDataModel!)
    methodend
    
    method public Boolean doModal()

            #sysgui! = BBjAPI().openSysGui("X0")
            
            #window! = CAST(BBjTopLevelWindow, #sysgui!.addWindow(#sysgui!.getAvailableContext(),25,25,1200,750,#Title!,$01101083$))
            #window!.setCallback(BBjAPI().ON_RESIZE, #this!, "onResizeScreen")
            #router! = new Router(#window!, #getThisInstance(), #Menu!)
            rem add one invisible button to force the BASIS variables to be loaded for CSS            
            #window!.addButton(1000,0,0,0,0,"TEST",$0010$ )
            
            
            main! = #window!.addChildWindow(#window!.getAvailableControlID(),0,0,100,80,"",$00100800$,#sysgui!.getAvailableContext())
            #createAppBarObject(#window!)
                

            main!.addStyle("mainarea")
            
            #Main! = cast(BBjChildWindow,main!)
            #Main!.addStyle("shrinked")

            #initializeDrawer(#Menu!, #FooterMenu!, #HeaderMenu!)
           
            BBjAPI().setCustomEventCallback("logout","logout")
            
            path! = ClientUtil.getUrlAnchor()

            if path!.isEmpty() or path!.equals("/") then
                if #startingPanel! <> null() then
                    #navigateTo(#startingPanel!)
                else
                    #navigateTo("/")
                fi
            else
                #navigateTo(path!)
            endif
           
            process_events,err=*same
            
            logout:
                #router!.navigate("/")
                #sysgui!.executeScript("window.location.reload()")
                methodret 1
       
    methodend
    
    method protected void createAppBarObject(BBjWindow window!)
        rem appbar! = new Appbar(window!)
        rem appbar!.setCallback(Appbar.ON_APPBAR_TOOGLE, #this!, "onAppbarMenuClick")
    methodend

    method public void onResizeScreen(BBjResizeEvent ev!)

        id$ = str(ev!.getWidth())
        if ev!.getWidth() < 425 then
            #isMobile! = Boolean.TRUE 
            #drawerHidden!=Boolean.TRUE
            #Drawer!.closeDrawer(null())
            #Drawer!.addStyle("drawerHide")  
        else 
            #Drawer!.removeStyle("drawerHide")
            #isMobile! = Boolean.FALSE 
            #Drawer!.openDrawer(null())
        fi
    methodend
    
    method public void navigateTo(String path!)
        #router!.navigate(path!)
    methodend

    method public void navigateTo(String path!, BBjString param$)
        #router!.navigate(path! + "/" + param$)
    methodend

    method public void navigateTo(MenuItem menu!, String param!)
        if param! = null() then
            #navigateTo(menu!)
        else
            #navigateTo(menu!.getBasePath(), str(param!))
        fi
    methodend

    rem /**
    rem  * this method navigates to the menu item with the given ID
    rem  * it assumes that the IDs are unique across the four menu structures
    rem  * It's left to the developer to ensure this uniqueness
    rem  */
    method public void navigateTo(BBjInt nodeId%)
        #navigateTo(nodeId%, null())
    methodend

    method public void navigateTo(BBjInt nodeId%, String param!)
        item! = #HeaderMenu!.getItem(nodeId%)

        if item! <> null() then
            #navigateTo(item!, param!)
            methodret
        fi

        item! = #Menu!.getItem(nodeId%)

        if item! <> null() then
            #navigateTo(item!, param!)
            methodret
        fi

        item! = #FooterMenu!.getItem(nodeId%)

        if item! <> null() then
            #navigateTo(item!, param!)
            methodret
        fi

        item! = #HiddenMenu!.getItem(nodeId%)

        if item! <> null() then
            #navigateTo(item!, param!)
            methodret
        fi
    methodend

    method public void navigateTo(MenuItem menu!)
        #navigateTo(menu!.getBasePath())
    methodend

    method public MenuItem getMenuItem(BBjString path$)
        methodret #Menu!.getItemByPath(path$)
    methodend

    method public void onMenuItemClick(BBjCustomEvent ev!)

        if #isMobile! = Boolean.TRUE then 
            #onAppbarMenuClick(null())
        fi

        nodeId=num(str(ev!.getObject()))
        item! = #Menu!.getItem(nodeId)
        #navigateTo(item!)
    methodend

    method public void onFooterMenuItemClick(BBjCustomEvent ev!)
        nodeId = num(str(ev!.getObject()))
        item! = #FooterMenu!.getItem(nodeId)
        #navigateTo(item!)
    methodend

    method public void onHeaderMenuItemClick(BBjCustomEvent ev!)
        nodeId = num(str(ev!.getObject()))
        item! = #HeaderMenu!.getItem(nodeId)
        #navigateTo(item!)
    methodend

    method private BBjWidget openPanel(MenuItem item!)
        
        if #currWindow! <> null() and !#currWindow!.isDestroyed() then
            #currWindow!.setVisible(0)
            #currWindow!=null()
        fi
        if item!.hasChildren() and !item!.hasProgram() then
            declare TreeListPanel menuPanel!

            if (menuPanel! = null()) then
                menuPanel! = #createMenuPanelObject(#Main!)
            fi

            menuPanel!.setMenu(#Menu!)
            menuPanel!.setCallback(BBjAPI.ON_BUTTON_PUSH,#this!,"onMenuItemClick")
            menuPanel!.setParentNode(item!.getNodeId())
            menuPanel!.setVisible(1)
            #currWindow! = cast(TreeListPanel, menuPanel!)
            methodret #currWindow!
        fi

        if #win_list!.containsKey(str(item!.getNodeId()) + item!.getCaption()) then
            #currWindow!= CAST(BBjWidget,#win_list!.get(str(item!.getNodeId()) + item!.getCaption() ))
            #currWindow!.redraw(0)
            #currWindow!.setVisible(1)
        else
            pgm$ = item!.getProgram()

            if pgm$ = "void" then
                callback$ = item!.getCallback()
                x! = eval("#" + callback$ + "()", err=*next)
                methodret x!
            fi

            if pgm$>"" then
                
                starttype = item!.getStartType()
                switch starttype
                    case 0
                        x! = null()
                        x! = eval("new "+pgm$+"(#Main!)",err=*next)

                        if x! = null() then
                            ClientUtil.consoleLog(str(BBjAPI().getLastBBjException()))
                            a = msgbox("Error starting "+item!.getCaption(),0,"ERROR")
                        else
                            #currWindow! = CAST(BBjWidget,x!)
                        fi

                        break
                    case 1
                        x! = new EmbedPanel(#Main!)
                        x!.start(item!)
                        #currWindow! = CAST(BBjWidget,x!)
                        x!.setCallback(BBjAPI().ON_CLOSE,#this!,"onEmbedPanelClose")
                        break
                    
                    case 2
                        x! = new EmbedPanel(#Main!)
                        x!.start(item!)
                        #currWindow! = CAST(BBjWidget,x!)
                        x!.setCallback(BBjAPI().ON_CLOSE,#this!,"onEmbedPanelClose")
                        break
                    case 4
                        rem DWCJ
                       c! = Class.forName("org.dwcj.bridge.IDwcjBBjBridge",err=*next)
                       if c! = null() then
                            a=msgbox("DWCJ Environment not found - check your classpath!")
                            break
                       fi

                       c! = Class.forName(pgm$,err=*next)
                       if c! = null() then
                            a=msgbox(pgm$+ "not found - check your classpath!")
                            break
                       fi

                        
                        if !#isDwcjInitialized! then
                            rem instantiate DWCJ environment
                            h! = new ::DWCJ/DwcjHelper.bbj::DwcjHelper() 
                            org.dwcj.Environment.init(BBjAPI(), h!)
                            #isDwcjInitialized! = Boolean.TRUE
                        fi
                        
                        x! = new EmbedDWCJCanvas(#Main!)
                        #currWindow! = CAST(BBjWidget,x!)

                        component! = null()
                        component! = eval("new "+pgm$+"()",err=*next)

                        if component! = null() then
                            ClientUtil.consoleLog(str(BBjAPI().getLastBBjException()))
                            a = msgbox("Error starting "+item!.getCaption(),0,"ERROR")
                        else
                            pa! = new org.dwcj.bridge.BBjPanelAdapter(x!.getCanvas())
                            pa!.add(component!)
                        fi

                        break                        
                    case default
                        rem ignore
                        break
                swend

                if #currWindow! <> null() then
                    #win_list!.put(str(item!.getNodeId()) + item!.getCaption(),#currWindow!)
                fi
            fi
        fi

        methodret #currWindow!
    methodend

    method public void onAvatarAreaClick(BBjEvent ev!)
        #AccountMenu!.show(#Avatar!,5,50)
    methodend   
  
    method public void onEmbedPanelClose(BBjCustomEvent ev!)
        item! = ev!.getObject()
        nodeId = item!.getNodeId()
        
        if #win_list!.containsKey(str(nodeId) + item!.getCaption()) then
            #win_list!.remove(str(nodeId) + item!.getCaption())
        fi
         
    methodend

    method public void onDrawerToggle(BBjCustomEvent ev!)
       state = num(str(ev!.getObject()))
       if state = 1
          #Main!.addStyle("shrinked")
          #Main!.removeStyle("expanded")
       else
          #Main!.addStyle("expanded")
          #Main!.removeStyle("shrinked")
       fi
    methodend

    method public void onAppbarMenuClick(BBjCustomEvent ev!)
        if #isMobile! = Boolean.TRUE then 
            #Drawer!.removeStyle("drawerHide")  
        fi

        if #drawerHidden! then
            #drawerHidden!=Boolean.FALSE
            #Drawer!.addStyle("drawerShow")
        else
            #drawerHidden!=Boolean.TRUE
            #Drawer!.removeStyle("drawerShow")  
        fi
    methodend

    method public void onLogout()
        LoginDialog.clearRememberToken()
        BBjAPI().postCustomEvent("logout", "")
        methodret
    methodend
    REM /**
    REM  * panelWindow! contains the main window of the portalframe.
    REM  * 
    REM  * item! contains the currently selected item in form of a MenuItem.
    REM  * 
    REM  * If standard portalframe function is wished to be used, onMenuItemClick is the 
    REM  * callback to used to jump to the clicked item.
    REM  * 
    REM  * it is necessary to update #currWindow! with the new window.
    REM  */
    
    
    method protected TreeListPanel createMenuPanelObject(BBjChildWindow panelWindow!)
        rem menuPanel! = new TreeListPanel(panelWindow!)
        rem menuPanel! = new MenuCardPanel(panelWindow!)
        
        menuPanel! = new MenuCardPanelSorted(panelWindow!)
        rem Test Colors
        colors! = new BBjVector()
        colors!.add("#408458")
        colors!.add("#9B0058")
        colors!.add("#6883BA")
        menuPanel!.setColors(colors!)
        
        
        methodret menuPanel!
    methodend
    
    method public void onChangeTheme()
        dark$="0"
        dark$=BBjAPI().getThinClient().getUserProperty(USER_PROPERTIES_COOKIES,"DarkMode",err=*next)
        if dark$>"0" then
            dark$="0"
            ClientUtil.setDarkMode(Boolean.FALSE)
        else
            dark$="1"
            ClientUtil.setDarkMode(Boolean.TRUE)
        fi
        BBjAPI().getThinClient().setUserProperty(USER_PROPERTIES_COOKIES ,"DarkMode",dark$)
    methodend

    method public void reloadActivePanel()
        if #currWindow! <> null() then 
            #currWindow!.redraw(0)
        endif
    methodend
    
    method public void reloadAllPanels()
        declare BBjVector keys!
        
        if #win_list! = null() then methodret
        if #win_list!.isEmpty() then methodret
        
        keys! = new BBjVector(#win_list!.keySet())
        
        for i = 0 to keys!.size() -1 
            declare auto BBjWidget widget!
            
            widget! = #win_list!.get(keys!.get(i))
            widget!.redraw(0)
        next i 
    methodend
    
    
    REM /**
    REM  * Searches for the panel in the Header and the normal Menu with the panel id
    REM  * If reloading with an existing anchor the startingPanel will be ignored
    REM  * Must be called bevor doModal()
    REM  */
    method public void setStartingPanel(BBjNumber id!)
        declare MenuItem item!
        
        item! = #HeaderMenu!.getItem(id!)
        if item! <> null() then
            #startingPanel! = item!
        fi
        
        item! = #Menu!.getItem(id!)
        if item! <> null() then
            #startingPanel! = item!
        fi     
    methodend
    
    REM /**
    REM  * Searches for the panel in the Header and the normal Menu with the panels anchor
    REM  * If reloading with an existing anchor the startingPanel will be ignored
    REM  * Must be called bevor doModal()
    REM  */
    method public void setStartingPanel(BBjString anchor!)
        declare MenuItem item!
        
        item! = #HeaderMenu!.getItem(anchor!)
        if item! <> null() then
            #startingPanel! = item!
        fi
        
        item! = #Menu!.getItem(anchor!)
        if item! <> null() then
            #startingPanel! = item!
        fi     
    methodend

    REM /**
    REM  * Returns a Window which is created on the TopLevelWindow
    REM  */
    method public BBjChildWindow getDialogWindow()
        if #dialogWindow! = null() or #dialogWindow!.isDestroyed() then
            #dialogWindow! = #window!.addChildWindow(#window!.getAvailableControlID(),0,0,0,0,"",$00108800$,BBjAPI().getSysGui().getAvailableContext())
            #dialogWindow!.setStyle("width","100vw")
            #dialogWindow!.setStyle("height","100vh")
            #dialogWindow!.setStyle("z-index","101")
            
        endif
        methodret #dialogWindow!
    methodend

    REM /**
    REM  * Removes the Window which was created by getDialogWindow
    rem  * If the Window is already destroyed this will do nothing
    REM  */
    method public void destroyDialogWindow()
        if #dialogWindow! <> null() and !#dialogWindow!.isDestroyed() then
            #dialogWindow!.destroy()
        endif
        #dialogWindow! = null()
    methodend


    method public void onRouteMatch(BBjCustomEvent event!)
        
        #routerEvent! = cast(BBjRouterEvent, event!.getObject())
        currMenuItem! = #getMenuItem(#routerEvent!.getPath())
       
        if currMenuItem! <> null() then
            #openPanel(currMenuItem!)
            BBjAPI().postPriorityCustomEvent(#ON_NAVIGATION$, #currWindow!)
        fi
    methodend


    method public void onNotFound(BBjCustomEvent ev!)
        if #pageNotFoundPanel! <> null() then
            #navigateTo(#pageNotFoundPanel!)
        else
            if #startingPanel! <> null() then
                #navigateTo(#startingPanel!)
            fi
        fi
    methodend

    method public BBjRouterEvent getLastRouterEvent()
        methodret #routerEvent!
    methodend
    
    method private void registerPageNotFound()
        if #pageNotFoundPanel! = null() then
            #pageNotFoundPanel! = #Menu!.addMenuItem(#Menu!.getRoot(),"404","","")
            #pageNotFoundPanel!.setProgram("::WebKit/framework/PageNotFound/PageNotFound.bbj::PageNotFound")
        fi
    methodend
    
    method public void setPageNotFound(MenuItem item!)
        #pageNotFoundPanel! = item!
    methodend
classend




